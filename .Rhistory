m <- matrix(c(-1, -2, 1, 1), 2,2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv <- makeCacheMatrix(x)
inv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
inv <- cacheSolve(x)
inv
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get
x$get()
inv <- cacheSolve(x)
inv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
}
x$get()
inv <- cacheSolve(x)
inv
inv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
solve(m)
}
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
}
x$get
x$get()
inv <- cachSolve(x)
inv <- cacheSolve(x)
inv
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
makeCasheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
x
x
x <- makeCacheMatrix(m)
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- makeCacheMatrix(m)
x$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
inv <- cacheSolve(x)
inv
inv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
solve(m)
}
inv <- cacheSolve(x)
inv
inv
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
solve(m)
m
}
m
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m <-solve(m)
m
}
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- mean
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
x$get()
inv <- cacheSolve(x)
inv
in
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- mean
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
solve(inv)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
solve(m)
m
}
inv <- cacheSolve(x)
inv
solve(inv)
b <- x$get
b
m <- matrix(c(-1, -2, 1, 1), 2,2)
x$get
x$get()
x <- makeCacheMatrix(m)
x$get
x$get()
solve(s$get())
solve(x$get())
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
m
cacheSolve <- function(x, ...) {
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
}
inv <- cacheSolve(x)
inv
solve(inv)
cacheSolve <- function(x, ...) {
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(solve(m))
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
inv <- cacheSolve(x)
inv
inv
inv
inv
inv
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
